@page "/simple-diagnosis"
@inject IDiagnoseService diagnoseService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime


<div class="container-lg mt-2">
    <div class="text-center">
        <h2>Diagnosis</h2>
        <p class="lead">Kindly select your symptoms.. </p>
    </div>

</div>

<div class="container">
    <EditForm Model="sampleData" OnValidSubmit="DiagnosePatient" OnInvalidSubmit="Failed">
         <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <input @bind="searchTerm" @bind:event="oninput" class="form-control" placeholder="Search symptoms..." />
        </div>

        <div class="row">
            @foreach (var property in typeof(DiagnoseDTO).GetProperties().Where(p=>IsMatch(p.Name)))
            {
                <div class="col-md-4 col-sm-6 mb-3">
                    <div class="form-check">
                        <input type="checkbox" id="@property.Name" class="form-check-input"
                               checked="@IsChecked(property.Name)"
                               @onchange="(e) => OnCheckboxChanged(new ChangeEventArgs { Value = ((ChangeEventArgs)e).Value }, property.Name)" />
                        <label class="form-check-label" for="@property.Name">
                            @property.Name
                        </label>
                    </div>
                </div>
            }
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

<!-- Modal -->
<div class="modal fade" id="responseModal" tabindex="-1" aria-labelledby="responseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="responseModalLabel">Diagnosis Result</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(diagnosisResult))
                {
                    @diagnosisResult
                }
                else
                {
                    <div class="alert alert-danger">An error occurred. Please try again.</div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


    @code {
        private DiagnoseDTO sampleData = new DiagnoseDTO();
        private string diagnosisResult;
    private string searchTerm = string.Empty;

    private bool IsMatch(string name)
    {
        return string.IsNullOrEmpty(searchTerm) || name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

        public async Task DiagnosePatient()
        {
            var result = await diagnoseService.DiagnoseDisease(sampleData);

            if(result.Success)
            {
                diagnosisResult = result.Message;
            await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('resultModal')).show();");
            }
        }

        public async Task Failed()
        {

        }

        private bool IsChecked(string propertyName)
        {
            var property = sampleData.GetType().GetProperty(propertyName);
            if (property != null)
            {
                return (float)property.GetValue(sampleData) == 1f;
            }
            return false;
        }

        private void OnCheckboxChanged(ChangeEventArgs e, string propertyName)
        {
            var isChecked = (bool)e.Value;
            var property = sampleData.GetType().GetProperty(propertyName);
            if (property != null)
            {
                property.SetValue(sampleData, isChecked ? 1f : 0f);
            }
        }

}
