@page "/simple-diagnosis"
@inject IDiagnoseService diagnoseService
@inject NavigationManager navigationManager
@inject PredictionResponse predictionResponse


<div class="container-lg mt-2">
    <div class="text-center">
        <h2>Diagnosis</h2>
        <p class="lead">Kindly select your symptoms.. </p>
    </div>

</div>

<div class="container">
    <EditForm Model="sampleData" OnValidSubmit="DiagnosePatient" OnInvalidSubmit="Failed">
         <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            @foreach (var property in typeof(DiagnoseDTO).GetProperties())
            {
                <div class="col-md-4 col-sm-6 mb-3">
                    <div class="form-check">
                        <input type="checkbox" id="@property.Name" class="form-check-input"
                               checked="@IsChecked(property.Name)"
                               @onchange="(e) => OnCheckboxChanged(new ChangeEventArgs { Value = ((ChangeEventArgs)e).Value }, property.Name)" />
                        <label class="form-check-label" for="@property.Name">
                            @property.Name
                        </label>
                    </div>
                </div>
            }
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

@code {
    private DiagnoseDTO sampleData = new DiagnoseDTO();

    public async Task DiagnosePatient()
    {
        var result = await diagnoseService.DiagnoseDisease(sampleData);

        if(result.Success)
        {
            predictionResponse.Message = result.Message;
            navigationManager.NavigateTo("/result");
        }
    }

    public async Task Failed()
    {

    }

    private bool IsChecked(string propertyName)
    {
        var property = sampleData.GetType().GetProperty(propertyName);
        if (property != null)
        {
            return (float)property.GetValue(sampleData) == 1f;
        }
        return false;
    }

    private void OnCheckboxChanged(ChangeEventArgs e, string propertyName)
    {
        var isChecked = (bool)e.Value;
        var property = sampleData.GetType().GetProperty(propertyName);
        if (property != null)
        {
            property.SetValue(sampleData, isChecked ? 1f : 0f);
        }
    }




}
